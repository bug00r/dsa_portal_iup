[OK]1. I want to create IUP GUI based on XML?
        - I built an own xml parser

[OK]2. I want to built xml data depend GUIs with XLST and adding params
        - libsxlt
            xmlDocPtr	xsltApplyStylesheet	(xsltStylesheetPtr style, 
					                         xmlDocPtr doc, 
					                         const char ** params)

[OK]3. I want to use external documents inside of XSLT.
        - xslt function document(URI) OK
        - but i want to have external document from existing document, can i hook this document function?
            1) libxslt provides void	xsltSetLoaderFunc		(xsltDocLoaderFunc f)

                xmlDocPtr	xsltDocLoaderFunc	(const xmlChar * URI, 
					                             xmlDictPtr dict, 
					                             int options, 
					                             void * ctxt, 
					                             xsltLoadType type)
                        Enum xsltLoadType {
                            XSLT_LOAD_START = 0 : loading for a top stylesheet
                            XSLT_LOAD_STYLESHEET = 1 : loading for a stylesheet include/import
                            XSLT_LOAD_DOCUMENT = 2 : loading document at transformation time
                        }
                        we have to catch xsltLoadType == XSLT_LOAD_DOCUMENT Rest has to delegate into
                                xsltDocDefaultLoaderFunc
            (Here we can't add our own loaded docs :( )
            -1. if i reset the loaderFunc i can delegate in all other parts to the function:
                        xsltDocDefaultLoaderFunc
            0. i got a context, how i can get into my data pointer.
                        xsltTransformContext contains the xsltStylesheetPtr; If the outside and inside are the same
                        it could work to create an own one.
                            struct custom pointer { 
                                xsltStylesheetPtr oldstyle; //this is the first data and could overloaded
                                void *mydata;
                            }
            1. i got xsltStylesheetPtr outside:
                        we are creating own pointer and inject our data.
                        so we need our own deletion method

            2) - xsltStylesheetPtr	xsltParseStylesheetDoc	(xmlDocPtr doc)
               - xsltTransformContextPtr	xsltNewTransformContext	(xsltStylesheetPtr style, xmlDocPtr doc)
               - xmlDocPtr	xsltApplyStylesheetUser	(xsltStylesheetPtr style, 
                                                    xmlDocPtr doc, 
                                                    const char ** params, 
                                                    const char * output, //output file, can be NULL
                                                    FILE * profile, //can be null
                                                    xsltTransformContextPtr userCtxt)
               - xsltTransformContextPtr._private // user defined data


                and loader method overload see above

[-]4.The Rules have a lots of dependecies and manipulations after something was changed. So, what will we need.
    [-] Collection of all dependecies and Manipulators based on topic:
        Topics: Breed, Culture, Profession, Pro, Contra, Special Abilities(Mage regular...)
            - manipulation type: add, increase, decrease...
            - manipulation target: to find maximum topics we have to recalculate.
        
        Example: Talents
            <talents>
                <group name="Fight"> //special case like language because variable Increasement Columns
                    <mods> // mods tag says this are mods for all Fighting Talents
                        <mod value="-1" src="//breed[@name = 'Mittelländer']" /> //means one column left => cheaper, comes from Breed
                        <mod value="1" src="//contra[@name = 'Dumpfighter']" /> //means one column right => more expensive, comes from contra
                    </mods>
                    <talent name="Dolche"/> //this will be affected by global fighting mods
                    <talent name="Schwerter">
                        <mods>
                            <mod value="-1" src="//pro[@name = 'Cheaper Talent']"> //this has both mods from Fight group and, comes from pro 
                        </mods>
                    </talent>
                </group>
                <group name="Körperliche">
                </group>
                ...
            </talents>


    [-] Collection of all given Data in a structured way: Base of this is the hero xml, there are all manual and    
        automatic files included. We have to follow the generation Rules. Which kind Data we have to collect, why 
        and from which place. 
            1. You have base GP
            2. Attributes like MU,KL ..., GS and SO.
                - Other Tags can have modificators like +, - and limits(example breed..)
            3. LeP, AsP, AT, PA, Ini...
                - Other Tags can have modificators like + - and limits(pro contra, breed, culture..)
            4. Pro and contras 
                - Other Tags can contain them, like Breed Culture and professions or manual addition
            5. Special Abilities
                - Other Tags can contain them, like Breed Culture and professions or manual addition
            6. Talents(regular, Speels Liturgies, Gives)
                - Other Tags can contain them, like Breed Culture and professions or manual addition
            7. Manipulator, they can included in every element and can change the calculation way of 
               different parts.
                - like mastership in single Talent or Talentgroup, There are some reduced costs
    [-] The calculation process is the most complex one, but what we have to do in different cases?
        - Example: Talent, Special Abilites
            - collection existing by breed, culture and profession.
            - make summary
            - collection modificators and manual additions, calculate costs of manual summary based on
              modifiers(it could be cheaper or more expensive)
    [-] Extraction of Dependecies in every Case: You can have Dependencies
        [-] List of all Dependencies to examine a base. For this you have to read all/most Rules
        [-] Check beside if they are valid(needed: Data consolidation)
    

